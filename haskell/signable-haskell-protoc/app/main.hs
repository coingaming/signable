{-# LANGUAGE OverloadedLabels #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE PatternSynonyms #-}

-- Copyright 2016 Google Inc. All Rights Reserved.
--
-- Use of this source code is governed by a BSD-style
-- license that can be found in the LICENSE file or at
-- https://developers.google.com/open-source/licenses/bsd

module Main where

import qualified Data.ByteString as B
-- Force the use of the Reflected API when decoding DescriptorProto
-- so that we can run the test suite against the Generated API.
-- TODO: switch back to Data.ProtoLens.Encoding once the Generated encoding is
-- good enough.

import qualified Data.Map as Map
import Data.Map.Strict ((!))
import Data.ProtoLens (decodeMessage, defMessage, encodeMessage)
import Data.ProtoLens.Compiler.Generate
import Data.ProtoLens.Compiler.Generate.Commented (CommentedModule, getModuleName)
import Data.ProtoLens.Compiler.ModuleName
import Data.ProtoLens.Compiler.Plugin
import qualified Data.Set as Set
import Data.String (fromString)
import qualified Data.Text as T
import Data.Text (Text, pack)
import DynFlags (DynFlags, getDynFlags)
import GHC (runGhc)
import GHC.Paths (libdir)
import GHC.SourceGen (ModuleNameStr, OccNameStr, RdrNameStr)
import GHC.SourceGen.Pretty (showPpr)
import GhcMonad (liftIO)
import Lens.Family2
import Proto.Google.Protobuf.Compiler.Plugin
  ( CodeGeneratorRequest,
    CodeGeneratorResponse,
  )
import Proto.Google.Protobuf.Descriptor
import System.Environment (getProgName)
import System.Exit (ExitCode (..), exitWith)
import System.IO as IO

main :: IO ()
main = do
  contents <- B.getContents
  progName <- getProgName
  case decodeMessage contents of
    Left e -> IO.hPutStrLn stderr e >> exitWith (ExitFailure 1)
    Right x -> runGhc (Just libdir) $ do
      liftIO $ generateInstances x
      dflags <- getDynFlags
      liftIO $ B.putStr $ encodeMessage $
        makeResponse dflags progName x

makeResponse :: DynFlags -> String -> CodeGeneratorRequest -> CodeGeneratorResponse
makeResponse dflags prog request =
  defMessage
    & #file
      .~ [ defMessage
             & #name .~ "SignableOrphan.hs"
             & #content .~ header
         ]
  where
    header :: Text
    header =
      "{- This file was auto-generated by the "
        <> pack prog
        <> " program. -}\n"

generateInstances :: CodeGeneratorRequest -> IO ()
generateInstances req =
  --print moduleNames
  --print protoMods
  return ()
  where
    files = req ^. #protoFile
    filesByName = Map.fromList [(x ^. #name, x) | x <- files]
    protoMods =
      fmap
        (\x -> ProtoMod (parseModName x) $ parseModTypes x)
        filesByName

data ProtoMod
  = ProtoMod
      { modName :: ModuleNameStr,
        modTypes :: [ProtoType]
      }
  deriving (Show)

data ProtoType
  = ProtoMsg Text DescriptorProto
  | ProtoEnum Text
  deriving (Show)

parseModName :: FileDescriptorProto -> ModuleNameStr
parseModName fd =
  fromString $ protoModuleName (T.unpack $ fd ^. #name)

parseModTypes :: FileDescriptorProto -> [ProtoType]
parseModTypes x =
  (parseEnum mempty <$> x ^. #enumType)
    <> ((x ^. #messageType) >>= parseMsg mempty)

parseEnum :: Text -> EnumDescriptorProto -> ProtoType
parseEnum ns x = ProtoEnum $ ns <> (x ^. #name)

parseMsg :: Text -> DescriptorProto -> [ProtoType]
parseMsg ns0 x =
  ProtoMsg n x
    : (parseEnum ns <$> x ^. #enumType)
    <> ((x ^. #nestedType) >>= parseMsg ns)
  where
    n = ns0 <> x ^. #name
    ns = n <> "'"
